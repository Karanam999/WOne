{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","onChange","App","e","setState","searchField","target","value","state","fetch","then","respose","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,EAAO,SAACC,GAAD,OAEZ,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,mCAAML,EAAMI,QAAQE,QACpB,mCAAMN,EAAMI,QAAQG,MAApB,WCPCC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SAEID,EAAMS,SAASC,KACd,SAAAN,GAAO,OACJ,cAAC,EAAD,CACqBA,QAASA,GAArBA,EAAQC,WCRpBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAU,SACbW,YAAeA,EACfE,SAAYD,MCqCLE,E,kDArCb,aAAe,IAAD,8BACZ,gBAaFF,aAAe,SAACG,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAQ,CACXZ,SAAU,GACVS,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACR,SAAWiB,S,oBAO7C,WACE,MAAgCC,KAAKN,MAA9BZ,EAAP,EAAOA,SAAUS,EAAjB,EAAiBA,YACXU,EAAmBnB,EAASoB,QAChC,SAAAzB,GAAO,OAAIA,EAAQE,KAAKwB,cAAcC,SAASb,EAAYY,kBAE/D,OACE,sBAAK7B,UAAU,MAAf,UACA,8CACI,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAcc,KAAKd,eAEvB,cAAC,EAAD,CAAUJ,SAAUmB,W,GA/BRI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6b74e6b0.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => \n    (\n        <div className='card-container'>\n            <img \n                alt='monster'\n                src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} \n            />\n            <h2> {props.monster.name}</h2>\n            <h2> {props.monster.email} </h2>\n        </div>\n    )\n\n","import React from 'react'\nimport {Card} from '../card/card.component'\nimport './card-list.styles.css'\n\nexport const CardList = (props) => {\n    return (\n        <div className='card-list'>\n        {\n            props.monsters.map\n            (monster => \n                <Card \n                    key={monster.id} monster={monster}>\n                </Card>)\n        }\n        </div>\n    )\n}\n","import React from 'react';\nimport './search-box.styles.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => \n    <input className='search' \n        placeholder = {placeholder}\n        onChange = {handleChange} >\n    </input>\n","import './App.css';\nimport React, { Component } from 'react'\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    }\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(respose => respose.json())\n      .then(users => this.setState({monsters : users}))\n  }\n  \n  handleChange = (e) =>{\n    this.setState({searchField:e.target.value})\n  }\n  \n  render (){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(\n      monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n  return (\n    <div className=\"App\">\n    <h1>Karanms List</h1>\n        <SearchBox \n          placeholder='SeachforMonster' \n          handleChange={this.handleChange}>\n        </SearchBox>\n      <CardList monsters={filteredMonsters}>\n      </CardList>\n    </div>\n  );\n  }\n}\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}